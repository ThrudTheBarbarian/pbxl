/******************************************************************************\
|* Common library code
|*
|* Module: stdio operations
\******************************************************************************/

#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>

#include <sys/select.h>
#include <sys/time.h>

#include <sys_lib.h>

/******************************************************************************\
|* global-to-the-file variables 
\******************************************************************************/
static uint16_t _fdVal[MAX_OPEN_FILES];
static uint8_t _fdCount;

/******************************************************************************\
|* Typedefs and defines used below 
\******************************************************************************/
typedef enum 
	{
	SignModiferNone,
	SignModiferSpace,
	SignModiferPlus,
	} SignModifer;

typedef enum 
	{
	ModiferTypeNone,
	ModiferTypeShort,
	ModiferTypeLong,
	ModiferTypeLongDouble,
	ModiferTypeLongLong,
	} ModiferType;

typedef union 
	{
	unsigned int val;
	struct 	
		{
		int escape: 1;
		ModiferType mod: 3;
		SignModifer sign: 2;
		unsigned int leftJust:1;
		int AlternateForm: 1;
		int leadingZero:1;
		int upperCase:1;
		unsigned int base: 5;
		unsigned int width:8;
		unsigned int precision:8;
		unsigned int hasPrecision:1;
		} fields;
	} PrintfEscapeStatus;


typedef unsigned long long int print_uint_t;
typedef          long long int print_int_t;


#define RESET_ESCAPE() 			(esc.val = 0)
#define MAX_NUM_ASCII_CHARS 	(64)

/******************************************************************************\
|* Determine if there is data available on an fd. Note the fd is expected to
|* be the value in a FILE->_file structure element
\******************************************************************************/
static int _canReadData(int fd)
	{
	if (fd >= SYS_UART_BASE && fd < SYS_UART_BASE + MAX_OPEN_FILES)
		return sys_uart_canReadData(fd-SYS_UART_BASE);
	else if (fd >= SYS_SPI_BASE && fd < SYS_SPI_BASE + MAX_OPEN_FILES)
		return sys_spi_canReadData(fd-SYS_SPI_BASE);
	return 0;
	}

/******************************************************************************\
|* Determine if there is space available on an fd. Note the fd is expected to
|* be the value in a FILE->_file structure element
\******************************************************************************/
static int _canWriteData(int fd)
	{
	if (fd >= SYS_UART_BASE && fd < SYS_UART_BASE + MAX_OPEN_FILES)
		return sys_uart_canWriteData(fd-SYS_UART_BASE);
	else if (fd >= SYS_SPI_BASE && fd < SYS_SPI_BASE + MAX_OPEN_FILES)
		return sys_spi_canWriteData(fd-SYS_SPI_BASE);
	return 0;
	}

/******************************************************************************\
|* writer function called by printf() 
\******************************************************************************/
static int stdWriter(void *f, const char *data, int len) 
	{
	while(len--) 
		putchar(*data++);
	
	return len;
	}

/******************************************************************************\
|* Create a writer for memory operations too
\******************************************************************************/
static int memWriter(void *fp, const char *data, int len) 
	{
	FILE *f = (FILE *)fp;

	if( f->_bf._base == NULL ) 
		return -1;

	if( f->_bf._size < len ) 
		len = f->_bf._size;

	memcpy(f->_bf._base, data, len);

	f->_bf._base += len;
	f->_bf._size -= len;

	return len;
	}

/******************************************************************************\
|* Create a reader for memory operations too
\******************************************************************************/
static int memReader(void *fp, char *data, int len) 
	{
	FILE *f = (FILE *)fp;

	if( f->_bf._base == NULL ) 
		return -1;

	if( f->_bf._size < len ) 
		len = f->_bf._size;

	memcpy(data, f->_bf._base, len);

	f->_bf._base += len;
	f->_bf._size -= len;

	return len;
	}

/******************************************************************************\
|* Definition of our FILE object for stdout/stderr
\******************************************************************************/
static FILE _io = 
	{
	NULL, 0,0,0,0, {NULL,0}, 0,
	NULL, NULL, NULL, NULL, stdWriter,
	{NULL,0}, NULL, 0,
	{0,0,0},{0},
	{NULL,0},
	0,0
	};

FILE *stdout 	= &_io;
FILE *stderr 	= &_io;
FILE *stdin 	= &_io;

/******************************************************************************\
|* Ought to come from ctype.h but this includes a huge table these days
\******************************************************************************/
static int isdigit(int c) 
	{
	return (c >= '0') && (c <= '9');
	}

/******************************************************************************\
|* Local copy of strlen so it can be inlined
\******************************************************************************/
static size_t _strlen(const char *s)
	{
	size_t c = 0;
	while( *s++ )
		c++;
	return c;
	}

/******************************************************************************\
|* Create a writer for memory operations too
\******************************************************************************/
static int printUL(FILE *stream, 
				   print_uint_t num, 
				   const char *prefix, 
				   PrintfEscapeStatus esc)
	{
	char buffer[MAX_NUM_ASCII_CHARS];
	int rval 				= 0;
	unsigned char count 	= 0;
	unsigned int base 		= esc.fields.base;
	char *ptr 				= buffer + MAX_NUM_ASCII_CHARS - 1;
	const char *numbers 	= esc.fields.upperCase ? "0123456789ABCDEF"
												   : "0123456789abcdef";

	/**************************************************************************\
	|* Print number to buffer
	\**************************************************************************/
	while(num) 
		{
		*ptr-- = numbers[num % base];
		num /= base;
		count++;
		}

	/**************************************************************************\
	|* Handle precision
	\**************************************************************************/
	if( esc.fields.hasPrecision ) 
		{
		while( count < esc.fields.precision ) 
			{
			*ptr-- = '0';
			count++;
			}
		}

	/**************************************************************************\
	|* Will always at least print 1 character so +1 to count
	\**************************************************************************/
	if(!count) 
		{
		*ptr-- = '0';
		count = 1;
		}

	rval += count;

	/**************************************************************************\
	|* If there is a prefix add the length of the prefix to the count
	\**************************************************************************/
	if (prefix) 
		{
		/**********************************************************************\
		|* and if padding with zeros print the prefix before the padding
		\**********************************************************************/
		if(esc.fields.leadingZero) 
			{
			while(*prefix) 
				{
				stream->_write(stream, prefix++, 1);
				rval++;
				}
			} 
		else 
			{
			const char *ptr = prefix;
			while(*ptr++) rval++;
			}
		}

	/**************************************************************************\
	|* Pad the number right justified
	\**************************************************************************/
	if( rval < esc.fields.width && !esc.fields.leftJust ) 
		{
		int i;
		char c = esc.fields.leadingZero ? '0' : ' ';

		for(i=0; i< esc.fields.width - rval; i++)  
			stream->_write(stream, &c, 1);
		
		rval += esc.fields.width - rval;
		}

	/**************************************************************************\
	|* print the prefix after the padding if padded with spaces
	\**************************************************************************/
	if(prefix && !esc.fields.leadingZero) 
		while(*prefix) 
			stream->_write(stream, prefix++, 1);

	/**************************************************************************\
	|* Print out the number from the buffer
	\**************************************************************************/
	ptr++;
	stream->_write(stream, ptr, count);

	/**************************************************************************\
	|* Pad if left justified
	\**************************************************************************/
	if( rval < esc.fields.width && esc.fields.leftJust ) 
		{
		int i;
		char c = ' ';

		for(i=0; i< esc.fields.width - rval; i++)  
			stream->_write(stream, &c, 1);
		
		rval += esc.fields.width - rval;
		}

	return rval;
	}

/******************************************************************************\
|* Where the heavy lifting takes place for all the output formatting codes
\******************************************************************************/
int vfprintf(FILE *stream, const char *fmt, va_list ap) 
	{
	int count = 0;
	PrintfEscapeStatus esc;

	RESET_ESCAPE();

	while(*fmt) 
		{
		if(esc.val) 
			{
			switch(*fmt) 
				{
				case '%':
					stream->_write(stream, "%", 1);
					count++;
					RESET_ESCAPE();
					break;
					
				case ' ':
					if(SignModiferSpace > esc.fields.sign) 
						esc.fields.sign = SignModiferSpace;
					break;
					
				case '+':
					if(SignModiferPlus > esc.fields.sign) 
						esc.fields.sign = SignModiferPlus;
					break;
					
				case 'l':
					if( esc.fields.mod == ModiferTypeLong) 
						esc.fields.mod = ModiferTypeLongLong;
					else 
						esc.fields.mod = ModiferTypeLong;
					break;
					
				case 'h':
					esc.fields.mod = ModiferTypeShort;
					break;
					
				case '#':
					esc.fields.AlternateForm = 1;
					break;
					
				case '0':
					if( !esc.fields.leftJust ) 
						esc.fields.leadingZero = 1;
					break;
					
				case '.':
					esc.fields.hasPrecision = 1;
					break;
					
				case '-':
					esc.fields.leftJust = 1;
					esc.fields.leadingZero = 0;
					break;

				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
				case '8':
				case '9':
					{
					unsigned int width = 0;
					while(*fmt && isdigit(*fmt)) 
						{
						width = width * 10 + (*fmt - '0');
						fmt++;
						}
					fmt--;
					if( esc.fields.hasPrecision ) 
						esc.fields.precision = width;
					else 
						esc.fields.width = width;
						
					break;
					}
					
				case 'n':
					{
					void *ptr = va_arg(ap, void*);
					switch(esc.fields.mod)
						{
						case ModiferTypeLongLong:
							*(long long int*)ptr = count;
							break;
							
						case ModiferTypeLong:
							*(long int*)ptr = count;
							break;
							
						case ModiferTypeNone:
							*(int*)ptr = count;
							break;
							
						case ModiferTypeShort:
							*(short int*)ptr = count;
							break;
							
						default:
							break;
						}
					RESET_ESCAPE();
					break;
					}
					
				case 's':
					{
					const char *str = va_arg(ap, const char*);
					int l = 0;

					/**********************************************************\
					|* If padding and right justified
					\**********************************************************/
					if( esc.fields.width && !esc.fields.leftJust)
						{
						int strl = _strlen(str);
						if( esc.fields.hasPrecision && esc.fields.precision < strl)
							strl = esc.fields.precision;
						

						while( strl < esc.fields.width )
							{
							stream->_write(stream, " ", 1);
							strl++;
							count++;
							}	
						}

					/**********************************************************\
					|* Print the string
					\**********************************************************/
					while(*str && (!esc.fields.hasPrecision || (l < esc.fields.precision)))
						{
						stream->_write(stream, str++, 1);
						l++;
						count++;
						}

					/**********************************************************\
					|* If padding and right justified
					\**********************************************************/
					if( esc.fields.width && esc.fields.leftJust) 
						{
						while( l < esc.fields.width) 
							{
							stream->_write(stream, " ", 1);
							l++;
							count++;
							}
						}
					RESET_ESCAPE();
					break;
					}
					
				case 'c':
					{
					char c = va_arg(ap, int);
					stream->_write(stream, &c, 1);
					count++;
					RESET_ESCAPE();
					break;
					}
					
				case 'p':
					{
					void *num = va_arg(ap, void *);
					esc.fields.base = 16;
					count += printUL(stream, (ptrdiff_t)num, "0x", esc);
					RESET_ESCAPE();
					break;
					}
					
				case 'X':
				case 'x':
				case 'u':
				case 'o':
					{
					print_uint_t num;
					const char *prefix=NULL;
					esc.fields.base = 16;

					if(*fmt == 'u') 
						esc.fields.base = 10;
					else if(*fmt == 'X') 
						esc.fields.upperCase = 1;
					else if(*fmt == 'o') 
						esc.fields.base = 8;

					switch(esc.fields.mod) 
						{
						case ModiferTypeLongLong:
							num = va_arg(ap, unsigned long long int);
							break;
							
						case ModiferTypeLong:
							num = va_arg(ap, unsigned long int);
							break;
							
						case ModiferTypeShort:
						case ModiferTypeNone:
						default:
							num = va_arg(ap, unsigned int);
							break;
						}

					if(esc.fields.AlternateForm && num) 
						{
						if(*fmt == 'X')  
							prefix = "0X";
						else if(*fmt == 'x')  
							prefix = "0x";
						else if(*fmt == 'o') 
							prefix = "0";
						}

					count += printUL(stream, num, prefix, esc);

					RESET_ESCAPE();
					break;
					}
					
				case 'd':
				case 'i':
					{
					print_int_t num;
					print_uint_t unum;
					const char *prefix=NULL;
					esc.fields.base = 10;

					switch(esc.fields.mod) 
						{
						case ModiferTypeLongLong:
							num = va_arg(ap, long long int);
							break;
							
						case ModiferTypeLong:
							num = va_arg(ap,  long int);
							break;
							
						case ModiferTypeShort:
						case ModiferTypeNone:
						default:
							num = va_arg(ap,  int);
							break;
						}

					if(num < 0) 
						prefix = "-";
					else 
						{
						if(esc.fields.sign == SignModiferSpace)  
							prefix = " ";
						else if(esc.fields.sign == SignModiferPlus)
							prefix = "+";
						}

					unum = llabs(num);
					count += printUL(stream, unum, prefix, esc);

					RESET_ESCAPE();
					break;
					}
					
				default:
					count += printf("Unsupported: \'%c\'", *fmt);
					RESET_ESCAPE();
				}
			} 
		else
			{
			if(*fmt == '%')
				esc.fields.escape = 1;
			else 
				{
				count++;
				stream->_write(stream, fmt, 1);
				}
			}
		fmt++;
		}
	return count;
	}


/******************************************************************************\
|* vfprintf to stdout
\******************************************************************************/
int vprintf(const char *format, va_list arg) 
	{
	return vfprintf(stdout, format, arg);
	}

/******************************************************************************\
|* Do the vfprintf thing to a memory stream
\******************************************************************************/
int vsnprintf(char *__restrict s, 
			  size_t n, 
			  const char *__restrict fmt, 
			  va_list ap) 
	{
	int rval;
	FILE mem;

	/**************************************************************************\
	|* Clear upper bit b/c _bf._size is signed
	\**************************************************************************/
	n &= 0x7FFFFFFF;

	/**************************************************************************\
	|* Set up the FILE structure appropriately 
	\**************************************************************************/
	mem._bf._size = n;
	if( mem._bf._size ) 
		mem._bf._size--;

	mem._write = memWriter;
	mem._bf._base = (unsigned char*)s;
	rval = vfprintf(&mem, fmt, ap);

	/**************************************************************************\
	|* If mem._bf._size is 0 then the maximum number of chars was reach and 
	|* the terminating NULL should be located at n - 1, otherwise the 
	|* terminating NULL is at rval
	\**************************************************************************/
	if( s && n ) 
		s[ mem._bf._size ? rval : n - 1] = '\0';

	return rval;
	}

/******************************************************************************\
|* vsnprintf with the limit pre-calculated for us
\******************************************************************************/
int vsprintf(char *str, const char *format, va_list arg) 
	{
	return 	vsnprintf(str, (size_t)-1, format, arg);
	}

/******************************************************************************\
|* ... and snprintf
\******************************************************************************/
int snprintf(char *__restrict s, size_t n, const char *__restrict fmt, ...) 
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vsnprintf(s, n, fmt, ap);
	va_end(ap);
	return count;
	}


int vscanf(const char *format, va_list arg)
	{
	return vfscanf(stdin, format, arg);
	}
	

/******************************************************************************\
|* Do the vfprintf thing to a memory stream
\******************************************************************************/
int vsnscanf(const char *__restrict s, 
			 size_t n, 
			 const char *__restrict fmt, 
			 va_list ap) 
	{
	FILE mem;

	/**************************************************************************\
	|* Clear upper bit b/c _bf._size is signed
	\**************************************************************************/
	n &= 0x7FFFFFFF;

	/**************************************************************************\
	|* Set up the FILE structure appropriately 
	\**************************************************************************/
	mem._bf._size = n;
	if( mem._bf._size ) 
		mem._bf._size--;

	mem._read = memReader;
	mem._bf._base = (unsigned char*)s;
	
	return vfscanf(&mem, fmt, ap);
	}

/******************************************************************************\
|* vsscanf with the limit pre-calculated for us
\******************************************************************************/
int vsscanf(const char * __restrict str, const char * __restrict format, va_list arg) 
	{
	return 	vsnscanf(str, (size_t)-1, format, arg);
	}
	
/******************************************************************************\
|* ... and snscanf
\******************************************************************************/
int snscanf(char *__restrict s, size_t n, const char *__restrict fmt, ...) 
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vsnscanf(s, n, fmt, ap);
	va_end(ap);
	return count;
	}

/******************************************************************************\
|* Where the heavy lifting takes place for all the input formatting codes. Well, 
|* mildly heavy lifting anyway. Currently only copes with format codes:
|*
|*	%x, %X		hex value, eg 0x0a
|*	%d			decimal input, eg 12
|*	%b			binary input, eg b10100101
|*  %n			any of the above
|*	%c			single character
|*
\******************************************************************************/
int vfscanf(FILE *stream, const char *format, va_list ap)
	{
	int value, tmp;
	int count;
	int pos;
	char neg, fmt_code;
	const char* pf;

	char ch = fgetc(stream);
	
	for (pf = format, count = 0; *format != 0 && ch != 0; )
		{
		while (*format == ' ' && *format != 0)
			format++;
			
		if (*format == 0)
			break;

		while (ch == ' ' && ch != 0)
			ch = fgetc(stream);
			
		if (ch == 0)
			break;

		if (*format == '%')
			{
			format++;
			if (*format == 'n')
				{
				if (ch == '0')
					{
					char ch2 = fgetc(stream);
					if (ch2 == 'x' || ch2 == 'X')
						fmt_code = 'x';
					else
						ungetc(ch2, stream);
					}
                else if (ch == 'b')
                	{
                    fmt_code = 'b';
                    ch = fgetc(stream);
                	}
                else
                    fmt_code = 'd';
				}
			else
				fmt_code = *format;

			switch (fmt_code)
				{
				case 'x':
				case 'X':
					for (value = 0, pos = 0; ch != 0; ch = fgetc(stream), pos++)
						{
						if ('0' <= ch && ch <= '9')
							tmp = ch - '0';
						else if ('a' <= ch && ch <= 'f')
							tmp = ch - 'a' + 10;
						else if ('A' <= ch && ch <= 'F')
							tmp = ch - 'A' + 10;
						else
							break;

						value *= 16;
						value += tmp;
						}
						
					if (pos == 0)
						return count;
					
					*(va_arg(ap, int*)) = value;
					count++;
					break;

            	case 'b':
					for (value = 0, pos = 0; ch != 0; ch = fgetc(stream), pos++)
						{
						if (ch != '0' && ch != '1')
                        	break;
						value *= 2;
						value += ch - '0';
						}
				
					if (pos == 0)
						return count;
					
					*(va_arg(ap, int*)) = value;
					count++;
					break;

				case 'd':
					if (ch == '-')
						{
						neg = 1;
						ch = fgetc(stream);
						}
					else
						neg = 0;
						
					value = 0;
					for (pos = 0; ch != 0; ch = fgetc(stream), pos++)
						{
						if ('0' <= ch && ch <= '9')
							value = value*10 + (int)(ch - '0');
						else
							break;
						}
				
					if (pos == 0)
						{
						*(va_arg(ap, int*)) = 0;
						return count;
						}
						
					*(va_arg(ap, int*)) = neg ? -value : value;
					count++;
					break;

				case 'c':
					*(va_arg(ap, char*)) = ch;
					count++;
					break;

				default:
					return count;
				}
			}
		else
			{
			if (*format != ch)
				break;
			}
			
		format++;
		if (*format == 0)
			break;
		else
			ch = fgetc(stream);
		}

	return count;
	}
	
/******************************************************************************\
|* Placeholder API
\******************************************************************************/
__attribute__((weak)) int putchar(int c) 
	{
	return c;
	}
		
/******************************************************************************\
|* Standard API: printf
\******************************************************************************/
int printf(const char *fmt, ... ) 
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vfprintf(stdout, fmt, ap);
	va_end(ap);

	return count;
	}
	
/******************************************************************************\
|* Standard API: scanf
\******************************************************************************/
int scanf(const char *fmt, ... )
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vfscanf(stdout, fmt, ap);
	va_end(ap);

	return count;
	}

/******************************************************************************\
|* Standard API: sprintf
\******************************************************************************/
int	sprintf(char * __restrict str, const char * __restrict fmt, ...)
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vsprintf(str, fmt, ap);
	va_end(ap);

	return count;
	}

/******************************************************************************\
|* Standard API: sscanf
\******************************************************************************/
int	sscanf(const char * __restrict str, const char * __restrict fmt, ...)
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vsscanf(str, fmt, ap);
	va_end(ap);

	return count;
	}

/******************************************************************************\
|* Standard API: fprintf
\******************************************************************************/
int fprintf(FILE *stream, const char *fmt, ...)
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vfprintf(stream, fmt, ap);
	va_end(ap);

	return count;
	}

/******************************************************************************\
|* Standard API: fscanf
\******************************************************************************/
int fscanf(FILE *stream, const char *fmt, ...)
	{
	va_list ap;
	int count;

	va_start(ap, fmt);
	count = vfscanf(stream, fmt, ap);
	va_end(ap);

	return count;
	}

/******************************************************************************\
|* Standard API: fputc
\******************************************************************************/
int fputc(int c, FILE *stream)
	{
	char ch = c;
	stream->_write(stream, &ch, 1);
	return c;
	}

/******************************************************************************\
|* Standard API: fputs
\******************************************************************************/
int fputs(const char *s, FILE *stream)
	{
	int count = 0;
	while(*s) 
		{
		count++;
		stream->_write(stream, s++, 1);
		}
	return count;
	}

/******************************************************************************\
|* Standard API: puts
\******************************************************************************/
int puts(const char *s)
	{
	int count = fputs(s, stdout);
	stdout->_write(stdout, "\n", 1);
	return count + 1;
	}

/******************************************************************************\
|* Standard API: fgets
\******************************************************************************/
char * fgets(char *str, int size, FILE *stream)
	{
	char *s = str;
	while (--size > 0)
		{
		stream->_read(stream, s, 1);
		if (*s++ == '\n')
			break;
		}
	*s = '\0';
	return str;
	}

/******************************************************************************\
|* Standard API: gets
\******************************************************************************/
char * gets(char *str)
	{
	char *s = str;
	while (1)
		{
		stdin->_read(stdin, s, 1);
		if (*s == '\n')
			break;
		s++;
		}
	*s = '\0';
	return str;
	}

/******************************************************************************\
|* Standard API: fgetc
\******************************************************************************/
int fgetc(FILE *stream)
	{	
	char ch;
	if ((stream->_r & 0x01) == 0)
		stream->_read(stream, &ch, 1);
	else
		{
		ch = (stream->_r >> 24);
		stream->_r = 0;
		}
	return (int)ch;
	}

/******************************************************************************\
|* Standard API: ungetc
\******************************************************************************/
int ungetc(int c, FILE *stream)
	{
	if (stream->_r)
		return EOF;
		
	stream->_r = (((c & 0xFF) << 24) | 1);
	return c;
	}
	
/******************************************************************************\
|* Standard API: fwrite
\******************************************************************************/
size_t fwrite(const void *__restrict ptr,
			  size_t size, 
			  size_t nitems, 
			  FILE *__restrict stream)
	{
	size_t count=0;
	while(count < nitems) 
		{
		if( stream->_write(stream, ptr, size) < size ) 
			break;
		
		count++;
		ptr += size;
		}
	return count;
	}

/******************************************************************************\
|* Standard API: fread
\******************************************************************************/
size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream)
	{
	size_t count = 0;
	while(count < nitems) 
		{
		int rlen = stream->_read(stream, ptr, size);
		if(  rlen < 0 )  
			break;

		if( rlen != size ) 
			stream->_seek(stream, -rlen, SEEK_CUR);

		count++;
		ptr += size;
		}
	return count;
	}

/******************************************************************************\
|* Standard API: fseek
\******************************************************************************/
int fseek(FILE *stream, long offset, int whence)
	{
	long rval = stream->_seek(stream, offset, whence);
	if( rval >= 0 ) 
		rval = 0;
	return rval;
	}

/******************************************************************************\
|* Standard API: ftell
\******************************************************************************/
long ftell(FILE *stream)
	{
	return stream->_seek(stream, 0, SEEK_CUR);
	}

/******************************************************************************\
|* Standard API: fileno
\******************************************************************************/
int fileno(FILE *fp)
	{
	if (fp)
		{
		int fd = fp->_file;
		for (int i=1; i<MAX_OPEN_FILES; i++)	// We don't use 0
			if (_fdVal[i] == fd)
				return i;
		}
	return 0;
	}
	
/******************************************************************************\
|* Standard API: fopen
\******************************************************************************/
FILE * fopen(const char *restrict name, const char *restrict mode)
	{
	(void) mode;
	
	/**************************************************************************\
	|* Check to see we have space
	\**************************************************************************/
	FILE *fp = NULL;	
	if (_fdCount >= MAX_OPEN_FILES)
		return fp;
	
	/**************************************************************************\
	|* Open the correct device
	\**************************************************************************/
	if (strcmp(name, "/dev/uart1") == 0)
		fp = sys_uart_fopen(1);
	else if (strcmp(name, "/dev/uart2") == 0)
		fp = sys_uart_fopen(2);
	else if (strcmp(name, "/dev/uart3") == 0)
		fp = sys_uart_fopen(3);
	else if (strcmp(name, "/dev/uart4") == 0)
		fp = sys_uart_fopen(4);
	else if (strcmp(name, "/dev/uart5") == 0)
		fp = sys_uart_fopen(5);
	else if (strcmp(name, "/dev/uart6") == 0)
		fp = sys_uart_fopen(6);
	else if (strcmp(name, "/dev/spi1") == 0)
		fp = sys_spi_fopen(1);
	else if (strcmp(name, "/dev/spi2") == 0)
		fp = sys_spi_fopen(2);
	else if (strcmp(name, "/dev/spi3") == 0)
		fp = sys_spi_fopen(3);
		
	/**************************************************************************\
	|* Register the file descriptor
	\**************************************************************************/
	if (fp != NULL)
		{
		int fd = fp->_file;
		for (int i=1; i<MAX_OPEN_FILES; i++)	// We don't use 0
			if (_fdVal[i] == 0)
				{
				_fdVal[i] = (uint16_t)fd;
				_fdCount ++;
				break;
				}
		}
		
	return fp;
	}

/******************************************************************************\
|* Standard API: fclose
\******************************************************************************/
int fclose(FILE *stream)
	{
	int ok = 0;
	
	/**************************************************************************\
	|* Clear out the reserved file descriptor
	\**************************************************************************/
	int fd = stream->_file;
	for (int i=1; i<MAX_OPEN_FILES; i++)	// We don't use 0
		if (_fdVal[i] == fd)
			{
			_fdVal[i] = 0;
			_fdCount --;
			break;
			}

	/**************************************************************************\
	|* Call any cleanup code registered
	\**************************************************************************/
	if( stream->_close )
		ok = stream->_close(stream);
	
	return ok;
	}


/******************************************************************************\
|* Standard API: select
\******************************************************************************/
int select(int nfds,
		   fd_set *restrict readfds,
		   fd_set *restrict writefds,
		   fd_set *restrict errorfds,
		   struct timeval *restrict timeout
		   )
	{
	if (nfds >= MAX_OPEN_FILES)
		nfds = MAX_OPEN_FILES;
	
	fd_set canRead, canWrite;
	
	if (readfds)
		FD_ZERO(&canRead);
	
	if (writefds)
		FD_ZERO(&canWrite);
	int shouldExit = 0;
	
	timer_t cron = 0;
	if (timeout)
		{
		uint32_t ms = timeout->tv_sec * 1000 + timeout->tv_usec/1000;
		TIMER_SET(cron, ms);
		}
		
	while (!shouldExit)
		{
		for (int i=1; i<nfds; i++)
			{
			int fd = _fdVal[i];
			if (fd == 0)
				continue;
			
			if (readfds && FD_ISSET(i,readfds))
				{
				if (_canReadData(fd))
					{
					FD_SET(i, &canRead);
					shouldExit = 1;
					}
				}

			if (writefds && FD_ISSET(i, writefds))
				{
				if (_canWriteData(fd))
					{
					FD_SET(i, &canWrite);
					shouldExit = 1;
					}
				}
			}
		
		if (timeout)
			{
			if (TIMER_EXPIRED(cron))
				shouldExit = 1;
			}
		}
	
	int count = 0;
	for (int i=0; i<nfds; i++)
		{
		if (readfds && FD_ISSET(i, &canRead))
			count ++;
		if (writefds && FD_ISSET(i, &canWrite))
			count ++;
		}
		
	if (readfds)
		FD_COPY(&canRead, readfds);
		
	if (writefds)
		FD_COPY(&canWrite, writefds);
		
	errorfds = NULL;
	return count;
	}

/******************************************************************************\
|* Extended API interface : make a FILE* into std{out,in,err}
\******************************************************************************/
void fSetStdio(FILE *fp)
	{
	stdout 	= fp;
	stderr 	= fp;
	stdin 	= fp;
	}
	

