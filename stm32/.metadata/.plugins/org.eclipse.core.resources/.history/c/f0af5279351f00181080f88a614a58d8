/******************************************************************************\
|* Common library code
|*
|* Simple malloc implementation that uses the 112k block, starting at the 
|* base address (0x2000 0000)
|*
|* Based on		: the allocator in K&R C, section 8.7
\******************************************************************************/

#include "sys_malloc.h"

static MallocHeader base;
static MallocHeader *freePtr	= NULL;
static uint32_t allocatedBytes	= 0;

/******************************************************************************\
|* "OS"-style limiter on how much memory we can allocate
\******************************************************************************/
char * sbrk(unsigned long numBytes)
	{
	if (allocatedBytes + numBytes > MALLOC_UPPER_LIMIT)
		return (char *)-1;	// For historical reasons.
	
	char *ptr = (char *)(MALLOC_BASE_ADDRESS + allocatedBytes);
	allocatedBytes += numBytes;
	
	return ptr;
	}

/******************************************************************************\
|* extend our malloc'd range
\******************************************************************************/
static MallocHeader * _allocMoreRAM(unsigned long numUnits)
	{
	char *ptr;
	MallocHeader *newMemPtr;
	
	numUnits = (numUnits < MIN_MALLOC_UNITS) ? MIN_MALLOC_UNITS : numUnits;
	ptr		 = sbrk(numUnits * sizeof(MallocHeader));
	if (ptr == (char *)-1)
		return NULL;
	
	newMemPtr = (MallocHeader *)ptr;
	newMemPtr->s.size = numUnits;
	free((void *)(newMemPtr+1));
	return freePtr;
	}

/******************************************************************************\
|* malloc() implementation
\******************************************************************************/
void * malloc(unsigned long numBytes)
	{
	MallocHeader *ptr;
	MallocHeader *prevPtr;
	
	unsigned long numUnits = (numBytes + sizeof(MallocHeader)-1)/sizeof(MallocHeader) +1;
	
	/**************************************************************************\
	|* Initialise on first call
	\**************************************************************************/
	if ((prevPtr = freePtr) == NULL)
		{
		base.s.next = freePtr = prevPtr = &base;
		base.s.size = 0;
		}
	
	/**************************************************************************\
	|* Find a slot we can use
	\**************************************************************************/
	for (ptr = prevPtr->s.next; ; prevPtr = ptr, ptr = ptr->s.next)
		{
		if (ptr->s.size >= numUnits)			// big enough, use it!
			{
			if (ptr->s.size == numUnits)		// exactly the right size...
				prevPtr->s.next = ptr->s.next;
			else								// allocate tail end
				{
				ptr->s.size -= numUnits;
				ptr += ptr->s.size;
				ptr->s.size = numUnits;
				}
			freePtr = prevPtr;
			return (void *)(ptr+1);
			}
		
		/**********************************************************************\
		|* If we wrapped around, attempt to allocate more
		\**********************************************************************/
		if (ptr == freePtr)
			{
			if ((ptr = _allocMoreRAM(numUnits)) == NULL)
				return NULL;	// Out of RAM
			}
		}
		
	return NULL; // Never reached
	}

/******************************************************************************\
|* free() - Placed the passed-in block into the free list
\******************************************************************************/
void free(void *anyPtr)
	{
	MallocHeader *ptr;
	MallocHeader *blockPtr = (MallocHeader *)anyPtr - 1;
	
	/**************************************************************************\
	|* Are we freeing a block at start or end of the arena
	\**************************************************************************/
	for (ptr = freePtr;
		 !(blockPtr > ptr && blockPtr < ptr->s.next);
		 ptr = ptr->s.next)
		if (ptr >= ptr->s.next && (blockPtr > ptr || blockPtr < ptr->s.next))
			break;	//
	
	/**************************************************************************\
	|* Should we join this to the upper region ?
	\**************************************************************************/
	if (blockPtr + blockPtr->s.size == ptr->s.next)
		{
		blockPtr->s.size   += ptr->s.next->s.size;
		blockPtr->s.next	= ptr->s.next->s.next;
		}
	else
		blockPtr->s.next	= ptr->s.next;
		
	/**************************************************************************\
	|* Should we join this to the lower region ?
	\**************************************************************************/
	if (ptr + ptr->s.size == blockPtr)
		{
		ptr->s.size		   += blockPtr->s.size;
		ptr->s.next			= blockPtr->s.next;
		}
	else
		ptr->s.next			= blockPtr;
	
	freePtr = ptr;
	}






