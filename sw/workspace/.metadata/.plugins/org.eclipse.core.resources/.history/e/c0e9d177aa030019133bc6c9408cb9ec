/*
 * memtest.c
 *
 *  Created on: 18 Dec 2018
 *      Author: simon
 */

#include <stdio.h>
#include <stdint.h>

#include "boot.h"

extern SDRAM_HandleTypeDef hsdram1;
uint8_t *ucHeap = 0xD0180000;

/*****************************************************************************\
|* Initialise the SDRAM command interface
\*****************************************************************************/
void bootMemInit(void)
	{
	FMC_SDRAM_CommandTypeDef cmd;

    __IO uint32_t tmpmrd =0;
    /* Configure a clock configuration enable command */
    cmd.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
    cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
    cmd.AutoRefreshNumber      = 1;
    cmd.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x1000);

    /* Insert 100 ms delay */
    HAL_Delay(100);

    /* Configure a PALL (precharge all) command */
    cmd.CommandMode            = FMC_SDRAM_CMD_PALL;
  	cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
  	cmd.AutoRefreshNumber      = 1;
  	cmd.ModeRegisterDefinition = 0;

  	/* Send the command */
  	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x1000);

  	/* Configure an Auto-Refresh command */
  	cmd.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  	cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
  	cmd.AutoRefreshNumber      = 4;
  	cmd.ModeRegisterDefinition = 0;

  	/* Send the command */
  	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x1000);

  	/* Program the external memory mode register */
  	tmpmrd = (uint32_t)	SDRAM_MODEREG_BURST_LENGTH_2			|
  						SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL		|
  						SDRAM_MODEREG_CAS_LATENCY_2           	|
  						SDRAM_MODEREG_OPERATING_MODE_STANDARD 	|
  						SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  	cmd.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
  	cmd.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
  	cmd.AutoRefreshNumber      = 1;
  	cmd.ModeRegisterDefinition = tmpmrd;

  	/* Send the command */
  	HAL_SDRAM_SendCommand(&hsdram1, &cmd, 0x1000);

  	/* refreshrate		= 64ms/8192 		=> 7.8125 uS/cyc
  	 * refresh cycles	= 7.8125 * 100MHz	=> 781
  	 * ref man:p1665	= 781-20			=> 761
  	 */
  	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 761);
	}

/*****************************************************************************\
|* Check we have access to all of the SDRAM, top to bottom
\*****************************************************************************/
void bootMemCheck(void)
	{
	uint8_t ok = TRUE;

	volatile uint32_t *mem = (volatile uint32_t *)SDRAM_BASE;

	*mem = 0xfeedf00d;
	if (*mem != 0xfeedf00d)
		{
		ok = FALSE;
		printf(" [Boot error] Cannot write to SDRAM memory @ BASE\n");
		}

	mem = (volatile uint32_t *)SDRAM_LAST;
	*mem = 0xf00dfeed;
	if (*mem != 0xf00dfeed)
		{
		ok = FALSE;
		printf(" [Boot error] Cannot write to SDRAM memory @ LAST\n");
		}

	if (ok)
		printf("SoS SDRAM Memory ok at both BASE and LAST\n");
	}
